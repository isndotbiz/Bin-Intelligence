"""
Script to update exploit types in the database to focus on e-commerce relevant types:
- Reassign all BINs to either 'card-not-present' or 'cross-border' exploit types
- Keep cross-border as is
- Reassign all other exploit types to card-not-present
"""
import logging
import sys
import random
from sqlalchemy import create_engine, and_, or_, func
from sqlalchemy.orm import sessionmaker
from models import BIN, BINExploit, ExploitType
import os

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def update_exploit_types_for_ecommerce():
    """
    Update all BINs to focus on e-commerce relevant exploit types:
    - Keep 'cross-border' as is
    - Reassign all other exploit types to 'card-not-present'
    """
    # Get database URL from environment variable
    database_url = os.environ.get("DATABASE_URL")
    if not database_url:
        logger.error("DATABASE_URL environment variable not set")
        sys.exit(1)
    
    # Connect to the database
    engine = create_engine(database_url)
    Session = sessionmaker(bind=engine)
    session = Session()
    
    try:
        # Get ID of cross-border exploit type
        cross_border_id = session.query(ExploitType.id).filter(
            ExploitType.name == 'cross-border'
        ).scalar()
        
        # Get ID of card-not-present exploit type
        card_not_present_id = session.query(ExploitType.id).filter(
            ExploitType.name == 'card-not-present'
        ).scalar()
        
        if not cross_border_id or not card_not_present_id:
            logger.error("Could not find required exploit types in the database")
            return
        
        # Find all BIN exploit records that are not cross-border
        non_cross_border_exploits = session.query(BINExploit).filter(
            BINExploit.exploit_type_id != cross_border_id
        ).all()
        
        logger.info(f"Found {len(non_cross_border_exploits)} non-cross-border exploit records")
        
        # Update all non-cross-border exploit records to card-not-present
        for exploit in non_cross_border_exploits:
            exploit.exploit_type_id = card_not_present_id
        
        session.commit()
        logger.info(f"Updated {len(non_cross_border_exploits)} exploit records to 'card-not-present'")
        
        # Count each exploit type
        exploit_counts = session.query(
            ExploitType.name, func.count(BINExploit.id)
        ).outerjoin(
            BINExploit, ExploitType.id == BINExploit.exploit_type_id
        ).group_by(
            ExploitType.name
        ).all()
        
        logger.info("Exploit type counts after update:")
        for name, count in exploit_counts:
            logger.info(f"  {name}: {count}")
        
    except Exception as e:
        logger.error(f"Error updating exploit types: {str(e)}")
        session.rollback()
    finally:
        session.close()

if __name__ == "__main__":
    logger.info("Starting update of exploit types for e-commerce focus...")
    update_exploit_types_for_ecommerce()
    logger.info("Update complete - database now focused on e-commerce relevant exploit types.")