"""
Script to clean up the database by removing BINs with exploit types
other than 'card-not-present' or 'cross-border'.

This focuses the system exclusively on e-commerce relevant BINs.
"""
import logging
import sys
from sqlalchemy import create_engine, and_, or_
from sqlalchemy.orm import sessionmaker
from models import BIN, BINExploit, ExploitType
import os

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def cleanup_irrelevant_exploit_types():
    """
    Remove all BINs with exploit types other than 'card-not-present' or 'cross-border'.
    This will focus the database exclusively on e-commerce relevant BINs.
    """
    # Get database URL from environment variable
    database_url = os.environ.get("DATABASE_URL")
    if not database_url:
        logger.error("DATABASE_URL environment variable not set")
        sys.exit(1)
    
    # Connect to the database
    engine = create_engine(database_url)
    Session = sessionmaker(bind=engine)
    session = Session()
    
    try:
        # Get IDs of relevant exploit types
        relevant_exploit_types = ['card-not-present', 'cross-border']
        relevant_type_ids = session.query(ExploitType.id).filter(
            ExploitType.name.in_(relevant_exploit_types)
        ).all()
        relevant_type_ids = [id[0] for id in relevant_type_ids]
        
        if not relevant_type_ids:
            logger.error("Could not find 'card-not-present' or 'cross-border' exploit types in the database")
            return

        # Get BINs with only irrelevant exploit types
        logger.info("Finding BINs with irrelevant exploit types...")
        
        # Find BINs that have at least one exploit linked but none of the relevant types
        bin_ids_with_irrelevant_exploits = session.query(BIN.id).filter(
            BIN.exploits.any(),  # Has at least one exploit
            ~BIN.exploits.any(BINExploit.exploit_type_id.in_(relevant_type_ids))  # None are relevant types
        ).all()
        bin_ids_to_delete = [id[0] for id in bin_ids_with_irrelevant_exploits]
        
        # Count before deletion
        total_bins_before = session.query(BIN).count()
        
        # First delete the associated exploit records to avoid foreign key constraint violations
        if bin_ids_to_delete:
            logger.info(f"Deleting {len(bin_ids_to_delete)} BINs with irrelevant exploit types...")
            # Delete the associated exploit records first
            session.query(BINExploit).filter(BINExploit.bin_id.in_(bin_ids_to_delete)).delete(synchronize_session=False)
            session.commit()
            
            # Now delete the BIN records
            session.query(BIN).filter(BIN.id.in_(bin_ids_to_delete)).delete(synchronize_session=False)
            session.commit()
        
        # Count after deletion
        total_bins_after = session.query(BIN).count()
        
        logger.info(f"Cleanup complete. Removed {total_bins_before - total_bins_after} BINs with irrelevant exploit types.")
        logger.info(f"Database now contains {total_bins_after} BINs focused on e-commerce vulnerabilities.")
        
        # Update any remaining exploit types for BINs without specific classification
        # These will be set to 'card-not-present' by default for e-commerce focus
        card_not_present_id = session.query(ExploitType.id).filter(
            ExploitType.name == 'card-not-present'
        ).first()
        
        if card_not_present_id:
            card_not_present_id = card_not_present_id[0]
            
            # Find BINs without any exploits
            bins_without_exploits = session.query(BIN).filter(
                ~BIN.exploits.any()
            ).all()
            
            # Create default exploit for these BINs
            for bin_record in bins_without_exploits:
                new_exploit = BINExploit(
                    bin_id=bin_record.id,
                    exploit_type_id=card_not_present_id,
                    frequency=1
                )
                session.add(new_exploit)
            
            if bins_without_exploits:
                logger.info(f"Added 'card-not-present' classification to {len(bins_without_exploits)} unclassified BINs")
                session.commit()
        
    except Exception as e:
        logger.error(f"Error cleaning up exploit types: {str(e)}")
        session.rollback()
    finally:
        session.close()

if __name__ == "__main__":
    logger.info("Starting cleanup of irrelevant exploit types...")
    cleanup_irrelevant_exploit_types()
    logger.info("Cleanup complete - database now focused on e-commerce relevant BINs.")